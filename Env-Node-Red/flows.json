[{"id":"5f808c7e.6ec774","type":"tab","label":"Simulation Données","disabled":false,"info":""},{"id":"12dd0896.e9e9c7","type":"tab","label":"DataStorage","disabled":false,"info":""},{"id":"e0ca6225.6d81f","type":"subflow","name":"Batcher","info":"Store incoming messages' field and emit them together inside at once inside an array.\n\n---\n\nParams:\n - `capacity`:\n   - descr: the number of item that can be stored in the queue. If exceeded, all the message will be emitted at once\n   - type: `number` (may be set to `Infinity`)\n   - example: `10`, `50`, `Infinity`\n - `delay`:\n   - descr: the delay in **ms** before the message is sent.\n   - type: `number` (may be set to `Infinity`)\n   - example: `1000`, `10000`, `Infinity`\n - `field`:\n   - descr: name(s) of the field(s) to queue in the queue.\n   - type: `string` or `string[]`\n   - example:\n     - (as string): `payload`, `topic`\n     - (as json): `\"payload\"`, `[\"payload\", \"topic\"]`\n\n*NB*: Using both infinite delay and infinite capacity will lead to the batcher never releasing a batch.","category":"","in":[{"x":60,"y":60,"wires":[{"id":"1758fbd7.e07fa4"}]}],"out":[{"x":320,"y":40,"wires":[{"id":"1758fbd7.e07fa4","port":0}]}],"env":[{"name":"capacity","type":"num","value":"10","ui":{"type":"input","opts":{"types":["num","env"]}}},{"name":"delay","type":"num","value":"1000","ui":{"type":"input","opts":{"types":["num","env"]}}},{"name":"field","type":"str","value":"payload","ui":{"type":"input","opts":{"types":["str","json","env"]}}},{"name":"reset","type":"str","value":"reset","ui":{"type":"input","opts":{"types":["str","env"]}}}],"color":"#DDAA99","inputLabels":["message"],"outputLabels":["batch"],"status":{"x":660,"y":80,"wires":[{"id":"3394ee8f.99f4e2","port":0},{"id":"df0c1623.1c8af","port":0}]}},{"id":"ba539b4c.aedcd8","type":"subflow","name":"GraphBatch","info":"SubFlow design to allow high throughput graph without trying to update the webpage every time a new value arive.\n\n---\n\nStandard ui_graph allow 2 use cases:\n - progressive: Add value to an existant graph\n - from dataset: load a set of point\n\nBoth mods are limited:\n - progressive:\n    - check if any value of the graph change before sending updating the dashboard. Leading to very bad perf if a graph has more than 20 points.\n    - No way to add more than 1 point\n - from dataset:\n    - No way to add point once loaded\n    - More or less meant to restored previously built graph\n\nThis subflow allow to:\n - add multiple sample at once,\n - batch measure togeher to reduce dashboard latency,\n\nThe interface is meant as transparent: any message previously able to be processed by an ui_graph should be allowed by this sub flow\n\nNB: if singular value are waitinge before getting sent, they may be received after a pack of value is received.\n\n---\n\nto use this subflow, connect both the:\n - graph's output to this subflow input\n - this subflow output to the graph's input\n\n3 kind (+1) are expected:\nFIXME: finish doc","category":"","in":[{"x":60,"y":220,"wires":[{"id":"788081ee.04f878"}]}],"out":[{"x":900,"y":220,"wires":[{"id":"70a535ef.dc180c","port":0}]}],"env":[{"name":"capacity","type":"num","value":"10","ui":{"type":"input","opts":{"types":["num","env"]}}},{"name":"delay","type":"num","value":"1000","ui":{"type":"input","opts":{"types":["num","env"]}}}],"color":"#DDAA99"},{"id":"432a2662.7115f8","type":"ui_base","theme":{"name":"theme-light","lightTheme":{"default":"#0094CE","baseColor":"#0094CE","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"darkTheme":{"default":"#097479","baseColor":"#097479","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","edited":true,"reset":false},"customTheme":{"name":"Untitled Theme 1","default":"#4B7930","baseColor":"#4B7930","baseFont":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif","reset":false},"themeState":{"base-color":{"default":"#0094CE","value":"#0094CE","edited":false},"page-titlebar-backgroundColor":{"value":"#0094CE","edited":false},"page-backgroundColor":{"value":"#fafafa","edited":false},"page-sidebar-backgroundColor":{"value":"#ffffff","edited":false},"group-textColor":{"value":"#1bbfff","edited":false},"group-borderColor":{"value":"#ffffff","edited":false},"group-backgroundColor":{"value":"#ffffff","edited":false},"widget-textColor":{"value":"#111111","edited":false},"widget-backgroundColor":{"value":"#0094ce","edited":false},"widget-borderColor":{"value":"#ffffff","edited":false},"base-font":{"value":"-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"}},"angularTheme":{"primary":"indigo","accents":"blue","warn":"red","background":"grey"}},"site":{"name":"Dashboard","hideToolbar":"false","allowSwipe":"false","lockMenu":"false","allowTempTheme":"true","dateFormat":"DD/MM/YYYY","sizes":{"sx":48,"sy":48,"gx":6,"gy":6,"cx":6,"cy":6,"px":0,"py":0}}},{"id":"c5524c55.9ecb","type":"ui_tab","name":"OpenData","icon":"map","order":3,"disabled":false,"hidden":false},{"id":"ab7c2880.4cc458","type":"ui_group","name":"Points de regroupement des ordures menageres","tab":"c5524c55.9ecb","order":2,"disp":true,"width":"27","collapse":false},{"id":"25a081cf.db982e","type":"mqtt-broker","name":"","broker":"localhost","port":"1883","clientid":"","usetls":false,"compatmode":false,"keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"b25770c.e80e39","type":"ui_tab","name":"Dashboard","icon":"dashboard","order":2,"disabled":false,"hidden":false},{"id":"c70aabd3.5789f8","type":"ui_group","name":"Capteur humidité","tab":"b25770c.e80e39","order":1,"disp":true,"width":"7","collapse":false},{"id":"15c903b4.b7a98c","type":"ui_group","name":"plan","tab":"b25770c.e80e39","order":2,"disp":true,"width":"20","collapse":false},{"id":"6e8e1379.2d16dc","type":"ui_group","name":"gauge-values","tab":"b25770c.e80e39","order":3,"disp":true,"width":"7","collapse":false},{"id":"5af44c6b.ba6c64","type":"ui_group","name":"Lignes du réseau IDELIS","tab":"c5524c55.9ecb","order":1,"disp":true,"width":"14","collapse":false},{"id":"62f39887.86e848","type":"ui_group","name":"Zones cyclables et stations idecycle","tab":"c5524c55.9ecb","order":2,"disp":true,"width":"27","collapse":false},{"id":"92d80cc3.eea9a","type":"mongodb","hostname":"pcazalis:pcazalis@projettutore.wpu3z.mongodb.net","topology":"dnscluster","connectOptions":"","port":"27017","db":"capteurs","name":""},{"id":"f5ede9ba.616b68","type":"ui_group","name":"Formulaire","tab":"4240e79f.fe9078","order":2,"disp":true,"width":"12","collapse":false},{"id":"f3d6a6f0.26f4a8","type":"ui_group","name":"Auteurs","tab":"4240e79f.fe9078","order":4,"disp":true,"width":"27","collapse":false},{"id":"4240e79f.fe9078","type":"ui_tab","name":"Informations","icon":"infos","order":3,"disabled":false,"hidden":false},{"id":"6c0665cc.3845ec","type":"ui_group","name":"SmartVilla","tab":"4240e79f.fe9078","order":1,"disp":true,"width":"12","collapse":false},{"id":"6d9ec9e6.c2a0d","type":"ui_tab","name":"Tab 4","icon":"dashboard","order":4,"disabled":false,"hidden":true},{"id":"9e4ad82d.ddbc68","type":"ui_group","name":"Group 1","tab":"6d9ec9e6.c2a0d","order":1,"disp":true,"width":"20","collapse":false},{"id":"f0c1eedf.d9f99","type":"serial-port","serialport":"/dev/tty.usbserial-14130","serialbaud":"9600","databits":"8","parity":"none","stopbits":"1","waitfor":"","dtr":"none","rts":"none","cts":"none","dsr":"none","newline":"\\n","bin":"false","out":"char","addchar":"","responsetimeout":"10000"},{"id":"c492d9ce.9de1b8","type":"serial-port","serialport":"COM3","serialbaud":"115200","databits":"8","parity":"none","stopbits":"1","waitfor":"","dtr":"none","rts":"none","cts":"none","dsr":"none","newline":"\\n","bin":"false","out":"char","addchar":"","responsetimeout":"10000"},{"id":"1758fbd7.e07fa4","type":"function","z":"e0ca6225.6d81f","name":"queue message","func":"// Force reset\nconst reset = context.get('reset');\nif(reset != null && msg.hasOwnProperty(reset)) {\n    const handle = context.get('timeout-handle');\n    if(handle != null) {\n        clearTimeout(handle);\n        context.set('timeout-handle');\n    }\n    context.set('queue', []);\n    return buildOutput(false);\n}\n\n\nconst queue = context.get('queue');\nconst field = context.get('field');\n\n// enlève les champs non demandé\nconst filteredMsg = {};\nfor(const [key, value] of Object.entries(msg.payload)) {\n    if(field.includes(key)) {\n        filteredMsg[key] = value;\n    }\n}\n\nqueue.push(filteredMsg);\ncontext.set('queue', queue);\n\n// vérifie qu'on soit pas à la limite de capacité\nconst capacity = context.get('capacity');\nif(queue.length >= capacity) {\n    const handle = context.get('timeout-handle');\n\n    // capacity > 1 && Number.isFinite(delay)\n    if(handle != null) {\n        clearTimeout(handle);\n        context.set('timeout-handle', null);\n    }\n    \n    return buildOutput(true);\n} else {\n    if (queue.length == 1) {\n        const delay = context.get('delay');\n        if(Number.isFinite(delay)) {\n            const handle = setTimeout(() => {\n                node.send(buildOutput(true));\n                \n                // enlève le timeout\n                context.set('timeout-handle', null);\n                // indique à node-red que la tâche async est fini\n                node.done();\n            }, delay);\n            context.set('timeout-handle', handle);\n        }\n    }\n    return buildOutput(false);\n}\n\n\nfunction buildOutput(sendQueue){\n    // récupère les variables nécessaires\n    const [queue, field, delay, capacity] = context.get(\n        ['queue', 'field', 'delay', 'capacity']\n    );\n    \n    let mainOutput = null;\n    if(sendQueue) {\n        // remplace la file de message par une nouvelle\n        context.set('queue', []);\n        // prépare le message contenant la file\n        mainOutput = {\n            payload: queue,\n            field: field,\n            delay: delay,\n            capacity: capacity,\n        };\n    }\n    \n    return [\n        mainOutput,\n        {\n            delay,\n            waiting: !sendQueue,\n            capacity,\n            length: queue.length,\n        },\n    ];\n}","outputs":2,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\n\n// crée une fille d'attente contenant\n// la listes des message en attentes\ncontext.set('queue', []);\n\n// valeur dans lequelle l'id retourner\n// par setTimout sera stocké\ncontext.set('timeout-handle', null);\n\n// récupère le délais maximun d'attente\n// avant que les messages soit stocké\nif(typeof env.get('delay') == 'number') {\n    context.set('delay', env.get('delay'));\n} else {\n    context.set('delay', 1000);\n}\n\n// défini the capacity of the queue. If reach all messages\n// will be sent at once.\nif(typeof env.get('capacity') == 'number') {\n    context.set('capacity', env.get('capacity'));\n} else {\n    context.set('capacity', 10);\n}\n\n// récupère les noms des champs a conserver\nconst field = env.get('field');\nif(typeof field == 'string') {\n    context.set('field', [field]);\n} else if(\n    typeof field == 'object' &&\n    Array.isArray(field) &&\n    field.every(e => typeof e == 'string')\n) {\n    context.set('field', field);\n} else {\n    context.set('field', ['payload']);\n}\n\n// défini un champs qui quand reçus forcera la réinitialization du programme\nconst reset = env.get('reset');\nif(typeof reset == 'string' && reset.length > 0 && !context.get('field').includes(reset)) {\n    context.set('reset', reset);\n} else {\n    context.set('reset', null);\n}","finalize":"// Code added here will be run when the\n// node is being stopped or re-deployed.\n\nconst id = this.context.get('timeout-handle');\nif(id != null) {\n    clearTimeout(id);\n}\ncontext.set('timeout-handle', null);\ncontext.set('queue', []);","x":180,"y":60,"wires":[[],["3394ee8f.99f4e2","df0c1623.1c8af"]],"inputLabels":["message"],"outputLabels":["batch","state"]},{"id":"3394ee8f.99f4e2","type":"function","z":"e0ca6225.6d81f","name":"format status","func":"function processMessage(msg) {\n    const {delay, length, capacity, waiting} = msg;\n    \n    if(waiting) {\n        // Got a reset\n        if(length == 0) {\n            return {\n                fill: 'grey',\n                shape: 'dot',\n                text: 'Queue canceled'\n            }\n        // new queue initiated\n        } if(length == 1) {\n            return {\n                fill: 'blue',\n                shape: 'ring',\n                text: `new queue started`,\n            };\n        } else if (capacity < Infinity){\n            const color = length/capacity < 0.7 ? 'green' : 'yellow';\n            return {\n                fill: color,\n                shape: 'ring',\n                text: `${length}/${capacity} messages stored`,\n            };\n        } else {\n            return {\n                fill: 'green',\n                shape: 'ring',\n                text: `${length} messages stored`\n            }\n        }\n    } else {\n        if(length == capacity) {\n            return {\n                fill: 'red',\n                shape: 'dot',\n                text: `capacity (${capacity}) reached`,\n            };\n        } else if (Number.isFinite(delay)) {\n            return {\n                fill: 'green',\n                shape: 'dot',\n                text: `${length} messages sent after ${delay/1000}s`,\n            };\n        } else {\n            return {\n                fill: 'green',\n                shape: 'dot',\n                text: `${length} messages sent`,\n            }\n        }\n    }\n}\n\nreturn {payload: processMessage(msg)}","outputs":1,"noerr":0,"initialize":"","finalize":"","x":410,"y":80,"wires":[[]]},{"id":"df0c1623.1c8af","type":"function","z":"e0ca6225.6d81f","name":"Reset status after idling","func":"// reset la dernière tache prévu:\nlet handle = context.get('timeout-handle');\n\n// on a reçu un message\n// => il y a du nouveaux avec la queue\n// => on cancel la dernière tache prévue\nif(handle != null) {\n    clearTimeout(handle);\n    handle = null;\n}\n\n// le message est le dernier que la queue envoyé\nif(!msg.waiting || msg.length == 0) {\n    handle = setTimeout(() => {\n        node.send({payload: {}});\n        node.done();\n        // l'handle sera supprimer au prochain passage\n    }, context.get('delay'))\n}\n\ncontext.set('timeout-handle', handle);\nreturn null;","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\nconst delay = env.get('delay');\nif(typeof delay == 'number' && Number.isFinite(delay)) {\n    context.set('delay', Math.min(Math.max(750, delay), 5000));\n} else {\n    context.set('delay', 1000);\n}\n\ncontext.set('timeout-handle', null);","finalize":"// Code added here will be run when the\n// node is being stopped or re-deployed.\n\nconst handle = context.get('timeout-handle');\nif(handle != null) {\n    clearTimeout(handle);\n    context.set('timeout-handle', null);\n}","x":450,"y":160,"wires":[[]]},{"id":"1b682f34.e19a61","type":"subflow:e0ca6225.6d81f","z":"ba539b4c.aedcd8","name":"","env":[{"name":"capacity","value":"capacity","type":"env"},{"name":"delay","value":"delay","type":"env"},{"name":"field","value":"[\"value\", \"topic\", \"ts\"]","type":"json"}],"x":420,"y":220,"wires":[["70a535ef.dc180c"]]},{"id":"70a535ef.dc180c","type":"function","z":"ba539b4c.aedcd8","name":"process messages","func":"// Teste si l'objet corrspond à une entrée\nfunction isEntry(elt) {\n    return typeof elt.ts == 'number'\n        && typeof elt.value == 'number'\n        && typeof elt.topic == 'string'\n}\n\nfunction initGraphData() {\n    return {\n        series: [],\n        data: [],\n    }\n}\n\nconst payload = msg.payload;\n// Le graphe envoie un payload undefined/null\n// si il ne contient pas de mesure\nif(payload == null) {\n    context.set('graphData', initGraphData());\n    return;\n}\n\n// filtre les messages qui ne sont pas sous forme de tableau\n// les valeurs uniques ont été groupé par Batcher\nif(!Array.isArray(payload)) {\n    return;\n}\n\nif(payload.length == 0) {\n    context.set('graphData', initGraphData());\n    return {payload: []};\n} // a récupéré une list de valeur\nelse if (payload.every(isEntry)) {\n    const graphData = msg.override != null ?\n            initGraphData() :\n            context.get('graphData');\n    // insert chaque valeur dans les données du graph\n    const toSort = new Set();\n    for(const elt of payload) {\n        const {ts, value, topic} = elt;\n        let i = graphData.series.indexOf(topic);\n        if(i == -1) {\n            i = graphData.series.length;\n            graphData.series.push(topic);\n            graphData.data.push([]);\n        }\n        graphData.data[i].push({x: ts, y: value});\n        toSort.add(i);\n    }\n    for(const i of toSort) {\n        graphData.data[i].sort((a, b) => a.x - b.x);\n    }\n    context.set('graphData', graphData);\n    return {payload: [graphData]};\n}\nelse if( // payload est un ensemble de valeur venat du graph\n    Array.isArray(payload[0].series) &&\n    Array.isArray(payload[0].data) &&\n    payload[0].data.every(e => Array.isArray(e))\n){\n    context.set('graphData', payload[0]);\n}\n","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is deployed.\ncontext.set('graphData', {series: [], data: []});","finalize":"","x":770,"y":220,"wires":[[]]},{"id":"3fdc4312.4a6824","type":"change","z":"ba539b4c.aedcd8","name":"Prepare message reset","rules":[{"t":"set","p":"payload","pt":"msg","to":"[]","tot":"json"}],"action":"","property":"","from":"","to":"","reg":false,"x":230,"y":260,"wires":[["70a535ef.dc180c"]]},{"id":"788081ee.04f878","type":"switch","z":"ba539b4c.aedcd8","name":"Reset data ?","property":"reset","propertyType":"msg","rules":[{"t":"null"},{"t":"else"}],"checkall":"true","repair":false,"outputs":2,"x":190,"y":220,"wires":[["73eeb665.d94608"],["1b682f34.e19a61","3fdc4312.4a6824"]],"outputLabels":["No","Reset !"]},{"id":"73eeb665.d94608","type":"switch","z":"ba539b4c.aedcd8","name":"payload has an array ?","property":"payload","propertyType":"msg","rules":[{"t":"istype","v":"array","vt":"array"},{"t":"istype","v":"object","vt":"object"}],"checkall":"false","repair":false,"outputs":2,"x":460,"y":160,"wires":[["70a535ef.dc180c"],["1b682f34.e19a61"]],"outputLabels":["multiples values to update","one value to accumulate"]},{"id":"1cc028ef.1d7737","type":"comment","z":"ba539b4c.aedcd8","name":"gère le reset du graoh","info":"Et des donées en attente","x":220,"y":300,"wires":[]},{"id":"d236d561.41832","type":"comment","z":"ba539b4c.aedcd8","name":"Valeur unique => batch","info":"","x":460,"y":100,"wires":[]},{"id":"3623eb80.7306a4","type":"debug","z":"12dd0896.e9e9c7","name":"testAptMQTT","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":450,"y":200,"wires":[]},{"id":"3b0b5d74.780602","type":"json","z":"12dd0896.e9e9c7","name":"","property":"payload","action":"","pretty":false,"x":430,"y":100,"wires":[["fc2b7a58.63fbe","7f73152.633146c","247e06a1.b12b7a"]]},{"id":"fc2b7a58.63fbe","type":"function","z":"12dd0896.e9e9c7","name":"","func":"msg.payload = msg.payload.Rempli;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":780,"y":100,"wires":[["812374ee.0255d"]]},{"id":"812374ee.0255d","type":"ui_gauge","z":"12dd0896.e9e9c7","name":"","group":"c70aabd3.5789f8","order":0,"width":0,"height":0,"gtype":"gage","title":"Rempli","label":"units","format":"{{value}}","min":0,"max":"1","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1080,"y":100,"wires":[]},{"id":"7f73152.633146c","type":"function","z":"12dd0896.e9e9c7","name":"","func":"msg.payload = msg.payload.Seuil;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":780,"y":180,"wires":[["f6764970.c7a968"]]},{"id":"247e06a1.b12b7a","type":"function","z":"12dd0896.e9e9c7","name":"","func":"msg.payload = msg.payload.Percentage;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","x":780,"y":260,"wires":[["3d4c771f.92eb3","46536011.e2029"]]},{"id":"f6764970.c7a968","type":"ui_gauge","z":"12dd0896.e9e9c7","name":"","group":"c70aabd3.5789f8","order":0,"width":0,"height":0,"gtype":"gage","title":"seuil","label":"units","format":"{{value}}","min":0,"max":"100","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1070,"y":180,"wires":[]},{"id":"3d4c771f.92eb3","type":"ui_gauge","z":"12dd0896.e9e9c7","name":"","group":"c70aabd3.5789f8","order":0,"width":0,"height":0,"gtype":"gage","title":"percentage","label":"units","format":"{{value}}","min":0,"max":"100","colors":["#00b500","#e6e600","#ca3838"],"seg1":"","seg2":"","x":1090,"y":260,"wires":[]},{"id":"46536011.e2029","type":"mongodb out","z":"12dd0896.e9e9c7","mongodb":"92d80cc3.eea9a","name":"test","collection":"capteur_hum","payonly":false,"upsert":true,"multi":false,"operation":"insert","x":1070,"y":340,"wires":[]},{"id":"994e3236.be947","type":"mqtt in","z":"12dd0896.e9e9c7","name":"","topic":"poubelle","qos":"2","datatype":"json","broker":"25a081cf.db982e","x":180,"y":260,"wires":[["3623eb80.7306a4","9443e7a7.fea8f8"]]},{"id":"1478efdd.44e01","type":"inject","z":"5f808c7e.6ec774","name":"Lat-Long-1","props":[{"p":"payload"}],"repeat":"60","crontab":"","once":true,"onceDelay":"10","topic":"","payload":"{\"lat\":43.295918745162524,\"long\":-0.3740672038575137,\"type\":\"Verre\"}","payloadType":"json","x":190,"y":140,"wires":[["9aabcdc3.0779a"]]},{"id":"9aabcdc3.0779a","type":"function","z":"5f808c7e.6ec774","name":"MajPressionVerre1","func":"let pression = flow.get('pression1');\nlet seuil = flow.get('seuil1');\nif(pression < seuil){\n    pression = pression + Math.round(Math.random()*(seuil - pression)+100);\n    flow.set('pression1',pression);\n}\n\nmsg.payload = {\n    \"_id\":1,\n    \"Lat\":msg.payload.lat,\n    \"Long\":msg.payload.long,\n    \"Type\":msg.payload.type,\n    \"Seuil\":seuil,\n    \"Pression\":pression\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"// Code added here will be run when the\n// node is being stopped or re-deployed.\ncontext.set('seuil',1000);\ncontext.set('pression',500);","x":450,"y":140,"wires":[["afc65301.e69e3","1e0f35d5.5a732a"]]},{"id":"afc65301.e69e3","type":"mqtt out","z":"5f808c7e.6ec774","name":"","topic":"poubelle","qos":"2","retain":"","broker":"25a081cf.db982e","x":940,"y":220,"wires":[]},{"id":"1e0f35d5.5a732a","type":"debug","z":"5f808c7e.6ec774","name":"testAvtMQTT","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":950,"y":460,"wires":[]},{"id":"22f8f7b6.b696a8","type":"inject","z":"5f808c7e.6ec774","name":"","props":[{"p":"init","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"","x":170,"y":60,"wires":[["e10e733c.27de7"]]},{"id":"e10e733c.27de7","type":"function","z":"5f808c7e.6ec774","name":"InitVar","func":"flow.set('seuil1',1000);\nflow.set('pression1',0);\nflow.set('seuil1bis',1000);\nflow.set('pression1bis',0);\n\nflow.set('seuil2',800);\nflow.set('pression2',0);\nflow.set('seuil2bis',800);\nflow.set('pression2bis',0);\n\nflow.set('seuil3',700);\nflow.set('pression3',0);\nflow.set('seuil3bis',700);\nflow.set('pression3bis',0);","outputs":1,"noerr":0,"initialize":"","finalize":"","x":410,"y":60,"wires":[[]]},{"id":"3bc1756c.88f27a","type":"inject","z":"5f808c7e.6ec774","name":"Lat-Long-2","props":[{"p":"payload"}],"repeat":"60","crontab":"","once":true,"onceDelay":"10","topic":"","payload":"{\"lat\":43.295918745162524,\"long\":-0.3740672038575137,\"type\":\"Commun\"}","payloadType":"json","x":190,"y":300,"wires":[["27201db8.bc8c92"]]},{"id":"27201db8.bc8c92","type":"function","z":"5f808c7e.6ec774","name":"MajPressionCommun2","func":"let pression = flow.get('pression2');\nlet seuil = flow.get('seuil2');\nif(pression < seuil){\n    pression = pression + Math.round(Math.random()*(seuil - pression)+50);\n    flow.set('pression2',pression);\n}\n\nmsg.payload = {\n    \"_id\":3,\n    \"Lat\":msg.payload.lat,\n    \"Long\":msg.payload.long,\n    \"Type\":msg.payload.type,\n    \"Seuil\":seuil,\n    \"Pression\":pression\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"// Code added here will be run when the\n// node is being stopped or re-deployed.\ncontext.set('seuil',1000);\ncontext.set('pression',500);","x":460,"y":300,"wires":[["afc65301.e69e3","1e0f35d5.5a732a"]]},{"id":"46fb30c2.2f571","type":"inject","z":"5f808c7e.6ec774","name":"Lat-Long-3","props":[{"p":"payload"}],"repeat":"60","crontab":"","once":true,"onceDelay":"10","topic":"","payload":"{\"lat\":43.295918745162524,\"long\":-0.3740672038575137,\"type\":\"Recyclage\"}","payloadType":"json","x":190,"y":460,"wires":[["757aaea.1972e5"]]},{"id":"757aaea.1972e5","type":"function","z":"5f808c7e.6ec774","name":"MajPressionRecyclage3","func":"let pression = flow.get('pression3');\nlet seuil = flow.get('seuil3');\nif(pression < seuil){\n    pression = pression + Math.round(Math.random()*(seuil - pression)+50);\n    flow.set('pression3',pression);\n}\n\nmsg.payload = {\n    \"_id\":5,\n    \"Lat\":msg.payload.lat,\n    \"Long\":msg.payload.long,\n    \"Type\":msg.payload.type,\n    \"Seuil\":seuil,\n    \"Pression\":pression\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"// Code added here will be run when the\n// node is being stopped or re-deployed.\ncontext.set('seuil',1000);\ncontext.set('pression',500);","x":470,"y":460,"wires":[["afc65301.e69e3","1e0f35d5.5a732a"]]},{"id":"9443e7a7.fea8f8","type":"mongodb out","z":"12dd0896.e9e9c7","mongodb":"92d80cc3.eea9a","name":"Collection Poubelle","collection":"poubelle","payonly":true,"upsert":true,"multi":false,"operation":"store","x":470,"y":340,"wires":[]},{"id":"c988b91c.a98168","type":"inject","z":"5f808c7e.6ec774","name":"Lat-Long-1bis","props":[{"p":"payload"}],"repeat":"60","crontab":"","once":true,"onceDelay":"10","topic":"","payload":"{\"lat\":43.295918745162524,\"long\":-0.3740672038575137,\"type\":\"Verre\"}","payloadType":"json","x":200,"y":220,"wires":[["d2d6a7c4.f0feb8"]]},{"id":"d2d6a7c4.f0feb8","type":"function","z":"5f808c7e.6ec774","name":"MajPressionVerre1bis","func":"let pression = flow.get('pression1bis');\nlet seuil = flow.get('seuil1bis');\nif(pression < seuil){\n    pression = pression + Math.round(Math.random()*(seuil - pression)+100);\n    flow.set('pression1bis',pression);\n}\n\nmsg.payload = {\n    \"_id\":2,\n    \"Lat\":msg.payload.lat,\n    \"Long\":msg.payload.long,\n    \"Type\":\"Verre\",\n    \"Seuil\":seuil,\n    \"Pression\":pression\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"// Code added here will be run when the\n// node is being stopped or re-deployed.\ncontext.set('seuil',1000);\ncontext.set('pression',500);","x":460,"y":220,"wires":[["afc65301.e69e3","1e0f35d5.5a732a"]]},{"id":"be0ecce9.89dd8","type":"inject","z":"5f808c7e.6ec774","name":"Lat-Long-2bis","props":[{"p":"payload"}],"repeat":"60","crontab":"","once":true,"onceDelay":"10","topic":"","payload":"{\"lat\":43.295918745162524,\"long\":-0.3740672038575137,\"type\":\"Commun\"}","payloadType":"json","x":200,"y":380,"wires":[["bc7d94c.a89bc68"]]},{"id":"bc7d94c.a89bc68","type":"function","z":"5f808c7e.6ec774","name":"MajPressionCommun2bis","func":"let pression = flow.get('pression2bis');\nlet seuil = flow.get('seuil2bis');\nif(pression < seuil){\n    pression = pression + Math.round(Math.random()*(seuil - pression)+50);\n    flow.set('pression2bis',pression);\n}\n\nmsg.payload = {\n    \"_id\":4,\n    \"Lat\":msg.payload.lat,\n    \"Long\":msg.payload.long,\n    \"Type\":msg.payload.type,\n    \"Seuil\":seuil,\n    \"Pression\":pression\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"// Code added here will be run when the\n// node is being stopped or re-deployed.\ncontext.set('seuil',1000);\ncontext.set('pression',500);","x":470,"y":380,"wires":[["afc65301.e69e3","1e0f35d5.5a732a"]]},{"id":"985aa293.20a4e","type":"inject","z":"5f808c7e.6ec774","name":"Lat-Long-3bis","props":[{"p":"payload"}],"repeat":"60","crontab":"","once":true,"onceDelay":"10","topic":"","payload":"{\"lat\":43.295918745162524,\"long\":-0.3740672038575137,\"type\":\"Recyclage\"}","payloadType":"json","x":200,"y":540,"wires":[["584c14f0.e8442c"]]},{"id":"584c14f0.e8442c","type":"function","z":"5f808c7e.6ec774","name":"MajPressionRecyclage3bis","func":"let pression = flow.get('pression3bis');\nlet seuil = flow.get('seuil3bis');\nif(pression < seuil){\n    pression = pression + Math.round(Math.random()*(seuil - pression)+50);\n    flow.set('pression3bis',pression);\n}\n\nmsg.payload = {\n    \"_id\":6,\n    \"Lat\":msg.payload.lat,\n    \"Long\":msg.payload.long,\n    \"Type\":msg.payload.type,\n    \"Seuil\":seuil,\n    \"Pression\":pression\n}\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"// Code added here will be run when the\n// node is being stopped or re-deployed.\ncontext.set('seuil',1000);\ncontext.set('pression',500);","x":480,"y":540,"wires":[["afc65301.e69e3","1e0f35d5.5a732a"]]},{"id":"c85ea389.a4d65","type":"comment","z":"5f808c7e.6ec774","name":"Simulation Poubelle","info":"Simulation de données pour les poubelles de la ville de Pau : \n    - 2 de Verre\n    - 2 de déchets Communs\n    - 2 de déchets Recyclage","x":1170,"y":320,"wires":[]}]