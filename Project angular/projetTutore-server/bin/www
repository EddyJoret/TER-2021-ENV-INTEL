#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('projettutore-service:server');
var http = require('http');
var cors = require('cors');
var dbMongo = require('../public/javascripts/dbMongo');
app.use(cors());

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var essai;
var poubelleHist = [];


// ajout de socket.io
//const server = require('http').Server(app);
const io = require('socket.io')(server, {
  cors: true,
  origins: ["*"]
});

io.on('connection', (socket) => {
  console.log('user connected');
  socket.on('essai', (message)=>{
    console.log('ok lets go');
  })
  socket.on('new-message', (message) => {
    dbMongo.queryCollection().then((value) => {
      essai = value.handsetCards;
      var poubelleid = value.tabPoubelleId;
      for(var i = 0; i< poubelleid.length; i++){
        var position;
        var date = new Date('1970-01-01T00:00:00.000Z');
        for(var j = 0; j< essai.length; j++){
          if(poubelleid[i]._id == essai[j]._id){
            if(new Date(essai[j].Date).getTime() > date.getTime()){
              position = j;
              date = new Date(essai[j].Date);
            }
          }
        }
        var jsonData = {
          "Poubelle_id" : essai[position]._id,
          "Type": poubelleid[i].Type,
          "Coord": {
            "Lat": poubelleid[i].Coord.Lat,
            "Long": poubelleid[i].Coord.Long
          },
          "Seuil": poubelleid[i].Seuil,
          "Pression": essai[position].Pression
        };
        poubelleHist.push(jsonData);
      }
      socket.emit('new-message', poubelleHist);
      poubelleHist.splice(0,poubelleHist.length);
      essai.splice(0,essai.length);
      poubelleid.splice(0,poubelleid.length);
    })
  });

  /*socket.on('new-poubelle_id', (message) => {
    console.log('connection poubelle id');
    dbMongo.queryCollection().then((value) => {
      var poubelleid = value.tabPoubelleId;
      socket.emit('new-poubelle_id', poubelleid);
      poubelleid.length = 0;
    })
  });*/
});









/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
