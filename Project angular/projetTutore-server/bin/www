#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('projettutore-service:server');
var http = require('http');
var cors = require('cors');
var dbMongo = require('../public/javascripts/dbMongo');
app.use(cors());

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var essai;

// ajout de socket.io
//const server = require('http').Server(app);
const io = require('socket.io')(server, {
  cors: true,
  origins: ["*"]
});

io.on('connection', (socket) => {
  console.log('user connected');
  
  socket.on('new-message', (message) => {
    dbMongo.queryCollection().then((value) => {
      essai = value;
      console.log(essai);
      socket.emit('new-message', essai.handsetCards);
      essai.handsetCards.length = 0;
    })
    
      //console.log(message);
      //console.log(essai);
      
      /*for(let i = 0; i <= essai.handsetCards.length; i++){
        console.log(essai.handsetCards[i]);
        
      }*/
      
      //essai.handsetCards.length = 0;
      
      //socket.emit(message);
  });

});








/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
